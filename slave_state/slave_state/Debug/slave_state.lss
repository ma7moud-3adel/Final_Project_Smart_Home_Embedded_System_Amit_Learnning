
slave_state.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001068  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c8  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b11  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bf  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c7  00000000  00000000  0000314b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00003b12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  64:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPin_Direction>:
			break;
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	c9 f1       	breq	.+114    	; 0xe6 <DIO_SetPin_Direction+0x7a>
  74:	08 95       	ret
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	91 f0       	breq	.+36     	; 0x9e <DIO_SetPin_Direction+0x32>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	d9 f0       	breq	.+54     	; 0xb6 <DIO_SetPin_Direction+0x4a>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	29 f1       	breq	.+74     	; 0xce <DIO_SetPin_Direction+0x62>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
  9e:	27 b3       	in	r18, 0x17	; 23
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPin_Direction+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPin_Direction+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	08 95       	ret
  b6:	24 b3       	in	r18, 0x14	; 20
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPin_Direction+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPin_Direction+0x52>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPin_Direction+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPin_Direction+0x6a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	81 bb       	out	0x11, r24	; 17
  e4:	08 95       	ret
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_SetPin_Direction+0xa0>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_SetPin_Direction+0x8a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_SetPin_Direction+0xb6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_SetPin_Direction+0xcc>
  f4:	08 95       	ret
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x92>
 106:	82 2b       	or	r24, r18
 108:	8a bb       	out	0x1a, r24	; 26
 10a:	08 95       	ret
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0xa8>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
 136:	08 95       	ret
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xd4>
 148:	82 2b       	or	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_TogglePin_Value>:
		break;
	}
}
void DIO_TogglePin_Value(Uint8t port, Uint8t pin)
{
	switch(port)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	89 f0       	breq	.+34     	; 0x174 <DIO_TogglePin_Value+0x26>
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_TogglePin_Value+0x10>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	c9 f0       	breq	.+50     	; 0x18a <DIO_TogglePin_Value+0x3c>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	11 f1       	breq	.+68     	; 0x1a0 <DIO_TogglePin_Value+0x52>
 15c:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 15e:	2b b3       	in	r18, 0x1b	; 27
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_TogglePin_Value+0x1c>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_TogglePin_Value+0x18>
 16e:	82 27       	eor	r24, r18
 170:	8b bb       	out	0x1b, r24	; 27
		break;
 172:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 174:	28 b3       	in	r18, 0x18	; 24
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_TogglePin_Value+0x32>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_TogglePin_Value+0x2e>
 184:	82 27       	eor	r24, r18
 186:	88 bb       	out	0x18, r24	; 24
		break;
 188:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 18a:	25 b3       	in	r18, 0x15	; 21
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_TogglePin_Value+0x48>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_TogglePin_Value+0x44>
 19a:	82 27       	eor	r24, r18
 19c:	85 bb       	out	0x15, r24	; 21
		break;
 19e:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 1a0:	22 b3       	in	r18, 0x12	; 18
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_TogglePin_Value+0x5e>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_TogglePin_Value+0x5a>
 1b0:	82 27       	eor	r24, r18
 1b2:	82 bb       	out	0x12, r24	; 18
 1b4:	08 95       	ret

000001b6 <LED0_Initialize>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_LOW);
	DIO_SetPin_Value(LED0_PORT, LED0_PIN, LED_LOW);
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 1c0:	08 95       	ret

000001c2 <LED0_TGL>:
}
void LED0_TGL(void)
{
	//TGL_BIT(LED0_PORT, LED0_PIN);
	DIO_TogglePin_Value(LED0_PORT, LED0_PIN);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_TogglePin_Value>
 1ca:	08 95       	ret

000001cc <LED1_Initialize>:
}
void LED1_Initialize(void)
{
	//SET_BIT(DDRC, PC2);//Define direction
	//DIO_SetDirection(18, DIO_PIN_OUTPUT);
	DIO_SetPin_Direction(LED1_PORT, LED1_PIN, LED_OUTPUT);//Define direction
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 1d6:	08 95       	ret

000001d8 <main>:
#include "LED.h"
#include "SPI.h"
#include "MOTOR.h"
int main(void)
{
	Motor_Init(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 1c 01 	call	0x238	; 0x238 <Motor_Init>
	LED0_Initialize();
 1de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED0_Initialize>
	LED1_Initialize();
 1e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LED1_Initialize>
	SPI_Init();
 1e6:	0e 94 55 01 	call	0x2aa	; 0x2aa <SPI_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	83 ed       	ldi	r24, 0xD3	; 211
 1ee:	90 e3       	ldi	r25, 0x30	; 48
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x18>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x22>
 1fa:	00 00       	nop
	_delay_ms(1000);
	Uint8t spi_rec =0;
	Uint8t direc =0;
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
		    break;
			}
		else if(direc==1) {
			Motor1_Enable();
			Motor1_Direction(1);
			direc = 0;
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(1000);
	Uint8t spi_rec =0;
	Uint8t direc =0;
    while (1) 
    {
		spi_rec = SPI_Receive();
 200:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_Receive>
		switch (spi_rec)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	19 f0       	breq	.+6      	; 0x20e <main+0x36>
 208:	81 36       	cpi	r24, 0x61	; 97
 20a:	99 f0       	breq	.+38     	; 0x232 <main+0x5a>
 20c:	f9 cf       	rjmp	.-14     	; 0x200 <main+0x28>
		{
		case 1 :
		    if(direc==0){
 20e:	c1 11       	cpse	r28, r1
 210:	07 c0       	rjmp	.+14     	; 0x220 <main+0x48>
			Motor1_Enable();
 212:	0e 94 42 01 	call	0x284	; 0x284 <Motor1_Enable>
			Motor1_Direction(0);
 216:	8d 2f       	mov	r24, r29
 218:	0e 94 45 01 	call	0x28a	; 0x28a <Motor1_Direction>
			direc = 1;
 21c:	c1 e0       	ldi	r28, 0x01	; 1
		    break;
 21e:	f0 cf       	rjmp	.-32     	; 0x200 <main+0x28>
			}
		else if(direc==1) {
 220:	c1 30       	cpi	r28, 0x01	; 1
 222:	71 f7       	brne	.-36     	; 0x200 <main+0x28>
			Motor1_Enable();
 224:	0e 94 42 01 	call	0x284	; 0x284 <Motor1_Enable>
			Motor1_Direction(1);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 45 01 	call	0x28a	; 0x28a <Motor1_Direction>
			direc = 0;
 22e:	cd 2f       	mov	r28, r29
			break;
 230:	e7 cf       	rjmp	.-50     	; 0x200 <main+0x28>
		}
		spi_rec =0;
		break;
		case 'a':
		LED0_TGL();
 232:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED0_TGL>
		spi_rec =0;
		break;
 236:	e4 cf       	rjmp	.-56     	; 0x200 <main+0x28>

00000238 <Motor_Init>:
/*Motor1 Disable*/
Motor_Status Motor1_Disable(void)
{
	SET_BIT(PORTD, PD4);/*Disable Motor*/
	return Motor_OK;
}
 238:	88 23       	and	r24, r24
 23a:	19 f0       	breq	.+6      	; 0x242 <Motor_Init+0xa>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	89 f0       	breq	.+34     	; 0x262 <Motor_Init+0x2a>
 240:	1f c0       	rjmp	.+62     	; 0x280 <Motor_Init+0x48>
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 260:	0f c0       	rjmp	.+30     	; 0x280 <Motor_Init+0x48>
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	65 e0       	ldi	r22, 0x05	; 5
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	65 e0       	ldi	r22, 0x05	; 5
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	66 e0       	ldi	r22, 0x06	; 6
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret

00000284 <Motor1_Enable>:
 284:	94 9a       	sbi	0x12, 4	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret

0000028a <Motor1_Direction>:
/*Motor1 Direction*/
Motor_Status Motor1_Direction(Motor_Direction direction)
{
	switch (direction)
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	39 f0       	breq	.+14     	; 0x29c <Motor1_Direction+0x12>
 28e:	18 f0       	brcs	.+6      	; 0x296 <Motor1_Direction+0xc>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	39 f0       	breq	.+14     	; 0x2a2 <Motor1_Direction+0x18>
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <Motor1_Direction+0x1c>
	{
		case Forward:
		SET_BIT(PORTC, PC3);
 296:	ab 9a       	sbi	0x15, 3	; 21
		CLR_BIT(PORTC, PC4);
 298:	ac 98       	cbi	0x15, 4	; 21
		break;
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <Motor1_Direction+0x1c>
		case Backward:
		SET_BIT(PORTC, PC4);
 29c:	ac 9a       	sbi	0x15, 4	; 21
		CLR_BIT(PORTC, PC3);
 29e:	ab 98       	cbi	0x15, 3	; 21
		break;
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Motor1_Direction+0x1c>
		case Stop:
		CLR_BIT(PORTC, PC3);
 2a2:	ab 98       	cbi	0x15, 3	; 21
		CLR_BIT(PORTC, PC4);
 2a4:	ac 98       	cbi	0x15, 4	; 21
		break;
	}
	return Motor_OK;
}
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	08 95       	ret

000002aa <SPI_Init>:
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 2aa:	bd 98       	cbi	0x17, 5	; 23
 2ac:	be 9a       	sbi	0x17, 6	; 23
 2ae:	bf 98       	cbi	0x17, 7	; 23
 2b0:	bc 98       	cbi	0x17, 4	; 23
 2b2:	83 e4       	ldi	r24, 0x43	; 67
 2b4:	8d b9       	out	0x0d, r24	; 13
 2b6:	08 95       	ret

000002b8 <SPI_Receive>:
Uint8t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 2b8:	77 9b       	sbis	0x0e, 7	; 14
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <SPI_Receive>
	return SPDR;
 2bc:	8f b1       	in	r24, 0x0f	; 15
}
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
